// Arrange
// ===
//
// Arrange and align a row of items with a lot of control. Provides a
// declarative, robust cross-browser way of using flexbox.\

// Arrange root
// ---
//
// 1. Remove default styles present on common root elements.
// 2. Ensure in iOS 5 and 6 that flex-direction isn't inherited from
//    any flexbox parents that has flex-direction set to row-reverse

.c-arrange {
    display: flex;
    flex-direction: row; // 2
    margin: 0; // 1
    padding: 0; // 1

    list-style: none; // 1
}

.c-arrange.c--inline {
    display: inline-flex;
}


// Arrange modifiers: Vertical alignment
// ---

.c-arrange.c--align-top {
    align-items: flex-start;
}

.c-arrange.c--align-middle {
    align-items: center;
}

.c-arrange.c--align-bottom {
    align-items: flex-end;
}


// Arrange modifiers: Horizontal alignment
// ---

.c-arrange.c--justify-start {
    justify-content: flex-start;
}

.c-arrange.c--justify-end {
    justify-content: flex-end;
}

.c-arrange.c--justify-between {
    justify-content: space-between;
}

.c-arrange.c--justify-center {
    justify-content: center;
}

.c-arrange.c--justify-around {
    justify-content: space-around;
}


// Arrange modifier: Flex direction
// ---

.c-arrange.c--row-reverse {
    flex-direction: row-reverse;
}

.c-arrange.c--column {
    flex-direction: column;
}


// Arrange Item
// ---
//
// 1. Ensure inline elements are treated as block-level.
// 2. Prevent width collapsing in old implementations.

.c-arrange__item {
    display: block; // 1
    flex: 1;
    width: 100%; // 2
}


// Arrange Item modifier: different sizes
// ---

.c-arrange__item.c--quarter-step {
    flex: 1.25;
}

.c-arrange__item.c--half-step {
    flex: 1.5;
}

.c-arrange__item.c--threequarter-step {
    flex: 1.75;
}

.c-arrange__item.c--full-step {
    flex: 2;
}


// Arrange Item modifier: Alignment
// ---

.c-arrange__item.c--align-right {
    text-align: right;
}


// Arrange Item modifier: Single-line
// ---

.c-arrange__item.c--single {
    white-space: nowrap;
}


// Arrange Item modifier: Shrink
// ---
//
// Shrink Arrange items to a minimum size.
//
// 1. Ensure width collapses in old implementations.

.c-arrange__item.c--shrink {
    flex: initial;
    width: auto; // 1
}


// Arrange Item modifiers: Display order
// ---
//
// Re-arrange the display order of up to six items. Add additional modifiers in
// your own stylesheet to re-order more.

.c-arrange__item.c--order-1 {
    order: 1;
}

.c-arrange__item.c--order-2 {
    order: 2;
}

.c-arrange__item.c--order-3 {
    order: 3;
}

.c-arrange__item.c--order-4 {
    order: 4;
}

.c-arrange__item.c--order-5 {
    order: 5;
}

.c-arrange__item.c--order-6 {
    order: 6;
}


// Arrange Individual Items
// ---

.c-arrange__item.c--align-self-start {
    align-self: flex-start;
}


// Combined modifier: Gutters
// ---
//
// Add standard horizontal space between items.

.c-arrange.c--gutters {
    margin-right: -$unit;
    margin-left: -$unit;

    > .c-arrange__item {
        margin: 0 $unit;
    }
}

.c-arrange.c--gutters-small {
    margin-right: -$sub-unit;
    margin-left: -$sub-unit;

    > .c-arrange__item {
        margin: 0 $sub-unit;
    }
}
